<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">

  <title>Self-Transforming Cube</title>

  <link rel="stylesheet" type="text/css">

  <script type="text/javascript"></script>
</head>

<body>

  <canvas id="c"></canvas>
  <script src="https://threejsfundamentals.org/threejs/resources/threejs/r105/three.min.js"></script>
  <script src="https://threejsfundamentals.org/threejs/resources/threejs/r105/js/controls/OrbitControls.js"></script>
  <script src="https://threejsfundamentals.org/threejs/resources/threejs/r105/js/loaders/GLTFLoader.js"></script>
  <script src="https://threejsfundamentals.org/threejs/../3rdparty/dat.gui.min.js"></script>
  <script src="js/three.js"></script>
  <script src="js/GLTFLoader.js"></script>
  <script src="js/OrbitControls.js"></script>
  <script src="node_modules/underscore/underscore.js"></script>
  <script>
  // ===================== MAIN THREE.JS SCRIPT================================ //

  // Load 3D Scene
 var scene = new THREE.Scene();

  // Create the large cube group
  var group = new THREE.Group();

  // Load Camera Perspektive
 var camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 20000 );
 camera.position.set(1, 10, 15); // x, y, z

  // Load a Renderer
 var renderer = new THREE.WebGLRenderer();
 renderer.setPixelRatio( window.devicePixelRatio );
 renderer.setSize(window.innerWidth, window.innerHeight);
 document.body.appendChild(renderer.domElement);

  // Load the Orbitcontroller
 var controls = new THREE.OrbitControls( camera, renderer.domElement );

  // Load Light
 var ambientLight = new THREE.AmbientLight( 0xcccccc );
 scene.add( ambientLight );

 var directionalLight = new THREE.DirectionalLight( 0x0b9c19 );
 directionalLight.position.set( 0, 1, 1 ).normalize();
 scene.add( directionalLight );

 var children;
 var numChildren;
 var edge_geometry;
 var edge_material;
 var edges;
 var loaded = 0;
 var total = 100;
 var root;
 var completed = false;
 var group;
 var pivot = new THREE.Group();
 var bigCube;
 var mixer;
 var clips;

 function main(){
    // glTf loader
   var loader = new THREE.GLTFLoader();
   const res = loader.load('./models/scene.gltf', (gltf) => {
     animations = gltf.animations;
     root = gltf.scene;
     root.scale.set( 2, 2, 2 );
     root.position.x = 0;				    // Position (x = right+ left-)
     root.position.y = 0;				    // Position (y = up+, down-)
     root.position.z = 0;				    // Position (z = front +, back-)

     children = root.children; // Array of all the cubes
     numChildren = children.length;

     bigCube = new THREE.Object3D();

     // add line edges to each cube and add them to a group (aka "the big cube") //
     for (var i = 0; i < numChildren; i++){
       // Create a new cube object by cloning the original //
       var cube = _.clone(children[i]);
       cube.modelViewMatrix = _.clone(children[i].modelViewMatrix);
       cube.normalMatrix = _.clone(children[i].normalMatrix);

       // Draw the edge lines //
       edge_geometry = new THREE.EdgesGeometry(cube.geometry);
       edge_material = new THREE.LineBasicMaterial( {color: 0x0b0c10} );
       edges = new THREE.LineSegments(edge_geometry, edge_material);
       cube.add(edges);
       bigCube.add(cube);
     }
     scene.add(root);
     pivot.add(bigCube);
     bigCube.position.set(0.5, 0.5, 0.5); // Pivot location (center of the cubes)
     scene.add(pivot);

     console.log(children);

     render();
     testMovement();
     animate();
   });

   function update() {
     mixer.update(deltaSeconds);
   }

   function animate(){
   	requestAnimationFrame(animate);
    pivot.rotation.y += 0.01; // Constant rotation of the big cube


    render();
  }

   function render(){
   	renderer.render(scene,camera);
  }

  // Function to randomly move a small cube around a bit //
  function testMovement(){
    mixer = new THREE.AnimationMixer(scene);
    clips = animations;

    // Play all animations
    clips.forEach( function ( clip ) {
    	mixer.clipAction( clip ).play();
    } );
    //cube = bigCube.children[0];
    //cube.position.x += 0.01;
  }

}
  main();
  // ===================== END THREE.JS SCRIPT ================================ //
  </script>
</body>



</html>
