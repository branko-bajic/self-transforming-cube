<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">

  <title>Self-Transforming Cube</title>

  <link rel="stylesheet" type="text/css">

  <script type="text/javascript"></script>
</head>

<body>

  <canvas id="c"></canvas>
  <script src="https://threejsfundamentals.org/threejs/resources/threejs/r105/three.min.js"></script>
  <script src="https://threejsfundamentals.org/threejs/resources/threejs/r105/js/controls/OrbitControls.js"></script>
  <script src="https://threejsfundamentals.org/threejs/resources/threejs/r105/js/loaders/GLTFLoader.js"></script>
  <script src="https://threejsfundamentals.org/threejs/../3rdparty/dat.gui.min.js"></script>
  <script src="js/three.js"></script>
  <script src="js/GLTFLoader.js"></script>
  <script src="js/OrbitControls.js"></script>
  <script src="node_modules/underscore/underscore.js"></script>
  <script>
  // ===================== MAIN THREE.JS SCRIPT================================ //
  var children;
  var numChildren;
  var edge_geometry;
  var edge_material;
  var edges;
  var loaded = 0;
  var total = 100;
  var root;
  var completed = false;
  var group;
  var pivot = new THREE.Group();
  var bigCube;
  var clips;
  var aCounter = 0;
  var numAnimations;
  var animationsArr;
  const ANIMATION_SPEEDCONTROL = 10;

  // Load 3D Scene
  var scene = new THREE.Scene();



  // Load Camera Perspective
 var camera = new THREE.PerspectiveCamera(65, window.innerWidth / window.innerHeight, 1, 20000);
 camera.position.set(1, 10, 15); // x, y, z

  // Load a Renderer
 var renderer = new THREE.WebGLRenderer();
 renderer.setPixelRatio( window.devicePixelRatio );
 renderer.setSize(window.innerWidth, window.innerHeight);
 document.body.appendChild(renderer.domElement);

  // Load the Orbitcontroller
 var controls = new THREE.OrbitControls( camera, renderer.domElement );

  // Load Light
 var ambientLight = new THREE.AmbientLight( 0xcccccc );
 scene.add( ambientLight );

 var directionalLight = new THREE.DirectionalLight( 0x0b9c19 );
 directionalLight.position.set( 0, 1, 1 ).normalize();
 scene.add( directionalLight );

 var mixer = new THREE.AnimationMixer(scene);

 function main(){
    // glTf loader
   var loader = new THREE.GLTFLoader();
   const res = loader.load('./models/cubes.gltf', (gltf) => {
     animations = gltf.animations;
     root = gltf.scene;
     root.scale.set( 2, 2, 2 );
     root.position.x = 0;				    // Position (x = right+ left-)
     root.position.y = 0;				    // Position (y = up+, down-)
     root.position.z = 0;				    // Position (z = front +, back-)

     children = root.children; // Array of all the cubes
     numChildren = children.length;

     bigCube = new THREE.Object3D();

     // add line edges to each cube and add them to a group (aka "the big cube") //
     for (var i = 0; i < numChildren; i++){
       // Create a new cube object by cloning the original //
       var cube = _.clone(children[i]);
       cube.modelViewMatrix = _.clone(children[i].modelViewMatrix);
       cube.normalMatrix = _.clone(children[i].normalMatrix);

       // Draw the edge lines //
       edge_geometry = new THREE.EdgesGeometry(cube.geometry);
       edge_material = new THREE.LineBasicMaterial( {color: 0x0b0c10} );
       edges = new THREE.LineSegments(edge_geometry, edge_material);
       cube.add(edges);
       bigCube.add(cube);
     }
     scene.add(root);
     pivot.add(bigCube);
     bigCube.position.set(0.5, 0.5, 0.5); // Pivot location (center of the cubes)
     scene.add(pivot);

     // Create array for holding all the animations UUIDs//
    animationsArr = [];
    animations.forEach(function (clip) {
      animationsArr.push(clip.uuid);
    } );
    numAnimations = animationsArr.length;
    console.log(animationsArr);
    console.log(animations);

    render();
    animate();

   });

   function update() {
     mixer.update(0.01);
   }

   function animate(){
   	requestAnimationFrame(animate);
    update(); // Update the animations
    pivot.rotation.y += 0.01; // Constant rotation of the big cube

    // Determine the cube to play the animation for //
    if (aCounter == 0 || aCounter % ANIMATION_SPEEDCONTROL == 0){
      var randomClipID = Math.floor(Math.random() * (numAnimations)); // Generate a random num between 0 and the
      newAnimation(animationsArr[randomClipID]);                      // number of animations
    }

    aCounter += 1;
    render();
  }

   function render(){
   	renderer.render(scene,camera);
  }

  function arrayRemove(arr, value) {

   return arr.filter(function(ele){
       return ele != value;
   });

}

  // Function to play a small cubes animation //
  function newAnimation(uuid){
    //requestAnimationFrame(animate);

    // Play the animation //
    animations.forEach(function (clip) {
      if (clip.uuid == uuid && !mixer.clipAction(clip).isRunning()) {
        //currPlaying.push(uuid);
        mixer.clipAction(clip).loop = THREE.LoopOnce; // Ensure the animation only plays once
        mixer.clipAction(clip).play(); // Play the animation
        mixer.clipAction(clip).reset();
        //currPlaying = arrayRemove(currPlaying, uuid); // Remove the animation from the list of currently playing animations
      }
    });
  }
}
  main();
  // ===================== END THREE.JS SCRIPT ================================ //
  </script>
</body>



</html>
